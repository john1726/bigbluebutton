<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:views="org.bigbluebutton.main.views.*"
	styleName="printButtonStyleNormal"
	click="confirmPrintingSlides()"
	height="24"
	toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.toolTip.print')}"
	enabled="false"
	creationComplete="onCreationComplete()"
	visible="{UserManager.getInstance().getConference().print}"
	includeInLayout="{UserManager.getInstance().getConference().print}" 
	mouseOver="onPrintButtonMouseOver(event)"
	mouseOut="onPrintButtonMouseOut(event)" >

	<mate:Listener type="{BBBEvent.PRINT_SLIDES}" method="onPrintButtonPressed" />
	<mate:Listener type="{FlashJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleFlashJoinedVoiceConference" />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStarted" />
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.core.model.MeetingModel;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.modules.phone.events.FlashJoinedVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

                        import com.adobe.images.JPGEncoder;

			private static const LOGGER:ILogger = getClassLogger(PrintButton);

			private var printingFlag:Boolean;
			private var firstAudioJoin:Boolean = true;
			private var layoutOptions:LayoutOptions = null;
			
			[Embed(source="/org/bigbluebutton/common/assets/images/print.png")]
			private var printReminderIcon:Class;

			private function onCreationComplete():void {
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
			}

			private function confirmPrintingSlides():void {
        		LOGGER.debug("Confirming Print Slides!!!!");
        
				// need to save the flag in case of any remote update on the printing status
				printingFlag = true;

				//var message:String = printingFlag;

				// Confirm logout using built-in alert
				//var alert:Alert = Alert.show(message, ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.confirm.title'), Alert.YES | Alert.NO, this, alertPrintingSlides, null, Alert.YES);
        
                                // ???
				var newX:Number = this.x;
				var newY:Number = this.y + this.height + 5;

				//alert.validateNow();
				//alert.move(newX, newY);
				//Accessibility.updateProperties();

                                // Print slides
                                // screen capture code
                                var jpgEncoder:JPGEncoder;
                                jpgEncoder = new JPGEncoder(90);
  
                                var bitmapData:BitmapData = new BitmapData(stage.width, stage.height);
                                bitmapData.draw(stage, new Matrix());

                                var img:ByteArray = jpgEncoder.encode(bitmapData);
            
                                var file:FileReference = new FileReference();
                                file.save(img, "capture.jpg");

			}

			private function alertPrintingSlides(e:CloseEvent):void {
				// check to see if the YES button was pressed
				if (e.detail==Alert.YES) {
					 doPrintingSlides();
				}
			}

			private function doPrintingSlides():void {
				//if (printingFlag == this.selected) {
					// while the user was confirming the printing change, the 
					// button state changed to the desired one (another user started
					// or stopped to print), so we do nothing
					//return;
				//}

				var event:BBBEvent = new BBBEvent(BBBEvent.PRINT_SLIDES);
				event.payload.remote = false;
				event.payload.printing = printingFlag;
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(event);

				this.enabled = false;
				LOGGER.debug("PrintButton:doPrintingSlides changing printing status to {0}", [event.payload.printing]);
				
				//if (!recordingFlag && getLayoutOptions().logoutOnStopPrinting) {
					//LOGGER.debug("Using 'logoutOnStopPrinting' option to logout user after stopping printing");
					//navigateToURL(new URLRequest(BBB.getLogoutURL()), "_self");
				//}
			}

			private function onPrintButtonPressed(event:BBBEvent):void {
				if (event.payload.remote) {
					//this.selected = event.payload.printing;

					resourcesChanged();

					//if (UserManager.getInstance().getConference().amIModerator() && MeetingModel.getInstance().meeting.allowStartStopPrinting) {
						this.enabled = true;
					//}

					LOGGER.debug("PrintButton:onPrintButtonPressed printing changed to {0}", [event.payload.printing]);
				}
			}

			private function handleFlashJoinedVoiceConference(e:FlashJoinedVoiceConferenceEvent):void {
				showPrintingNotification();
			}
			
			private function handleWebRTCCallStarted(e:WebRTCCallEvent):void {
				showPrintingNotification();
			}
			
			private function showPrintingNotification():void {
				//if (firstAudioJoin && this.visible && !this.selected 
						//&& getLayoutOptions().showPrintingNotification
						//&& UserManager.getInstance().getConference().amIModerator()
						//&& MeetingModel.getInstance().meeting.allowStartStopPrinting) {
					//var alert:Alert = Alert.show(ResourceUtil.getInstance().getString("bbb.mainToolbar.printBtn..notification.message1") + "\n\n" + ResourceUtil.getInstance().getString("bbb.mainToolbar.printBtn..notification.message2"), ResourceUtil.getInstance().getString("bbb.mainToolbar.printBtn..notification.title"), Alert.OK, this);
					//alert.titleIcon = printReminderIcon;
					
					//var newX:Number = this.x;
					//var newY:Number = this.y + this.height + 5;
					
					//alert.validateNow();
					//alert.move(newX, newY);
					
					//firstAudioJoin = false;
				//}
			}
			
			private function getLayoutOptions() : LayoutOptions {
				if (layoutOptions == null) {
					layoutOptions = new LayoutOptions();
					layoutOptions.parseOptions();
				}
				return layoutOptions;
			}
			
			private function onPrintButtonMouseOver(event:MouseEvent):void {
				//if (UserManager.getInstance().getConference().amIModerator()) {
					this.styleName = "printButtonStyleNormal";
				//	this.styleName = this.selected? "printButtonStyleStop": "printButtonStyleStart";
				//}
			}

			private function onPrintButtonMouseOut(event:MouseEvent):void {
				//if (UserManager.getInstance().getConference().amIModerator()) {
					this.styleName = "printButtonStyleNormal";
				//}
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();

				//this.styleName = this.selected? "printButtonStyleStart": "printButtonStyleNormal";
                                this.styleName = "printButtonStyleNormal";

				//if (UserManager.getInstance().getConference().amIModerator() && MeetingModel.getInstance().meeting.allowStartStopPrinting) {
					//if (this.selected) {
						//this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.toolTip.stop');
					//} else {
						//this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.toolTip.start');
					//}
				//} else {
					//if (this.selected) {
						this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.toolTip.printing');
					//} else {
						//this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.printBtn.toolTip.notPrinting');
					//}
				//}
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
		]]>
	</mx:Script>
</mx:Button>
